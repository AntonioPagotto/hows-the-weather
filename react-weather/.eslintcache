[{"C:\\Users\\b2ml-35\\Documents\\GitHub\\react-weather\\react-weather\\src\\index.tsx":"1","C:\\Users\\b2ml-35\\Documents\\GitHub\\react-weather\\react-weather\\src\\reportWebVitals.ts":"2","C:\\Users\\b2ml-35\\Documents\\GitHub\\react-weather\\react-weather\\src\\App.tsx":"3","C:\\Users\\b2ml-35\\Documents\\GitHub\\react-weather\\react-weather\\src\\models\\Weather.tsx":"4"},{"size":517,"mtime":1607688542437,"results":"5","hashOfConfig":"6"},{"size":440,"mtime":1607688542441,"results":"7","hashOfConfig":"6"},{"size":2937,"mtime":1607718722804,"results":"8","hashOfConfig":"6"},{"size":142,"mtime":1607688542439,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1jxzi6y",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\b2ml-35\\Documents\\GitHub\\react-weather\\react-weather\\src\\index.tsx",[],["20","21"],"C:\\Users\\b2ml-35\\Documents\\GitHub\\react-weather\\react-weather\\src\\reportWebVitals.ts",[],"C:\\Users\\b2ml-35\\Documents\\GitHub\\react-weather\\react-weather\\src\\App.tsx",["22","23"],"import React, { useEffect, useState } from 'react';\r\nimport { Weather } from './models/Weather';\r\n\r\nconst api = {\r\n  key: \"2dd1b7f777237a53fa47dd63b7cc873c\",\r\n  base: \"https://api.openweathermap.org/data/2.5/\"\r\n}\r\n\r\nfunction App() {\r\n\r\n  const [query, setQuery] = useState('');\r\n  const [weather, setWeather] = useState<Weather | undefined>(undefined);\r\n\r\n  const search = (evt: any) => {\r\n    if (evt.key === \"Enter\") {\r\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\r\n        .then(res => res.json())\r\n        .then(results =>\r\n          setWeather(results));\r\n      setQuery('');\r\n    }\r\n  }\r\n\r\n  const renderBg = (weather: any) => {\r\n    switch (weather?.weather[0]?.main) {\r\n      case undefined:\r\n        return 'app';\r\n      case 'Thunderstorm':\r\n        return 'app thunderstorm';\r\n      case 'Drizzle':\r\n        return 'app thunderstorm';\r\n      case 'Rain':\r\n        return 'app rain';\r\n      case 'Snow':\r\n        return 'app snow';\r\n      case 'Mist':\r\n        return 'app mist';\r\n      case 'Clear':\r\n        return 'app bg';\r\n      case 'Clouds':\r\n        return 'app broken';\r\n      default:\r\n        return 'app';\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className={renderBg(weather)}>\r\n      <main>\r\n        <div className=\"container\">\r\n          <div className=\"title\">\r\n            HOWS <span className=\"primary-color\">THE</span> WEATHER?\r\n        </div>\r\n          <div className=\"search-box\">\r\n            <input type=\"text\" className=\"search-bar\" placeholder=\"Insira a cidade...\"\r\n              onChange={e => setQuery(e.target.value)}\r\n              value={query}\r\n              onKeyPress={search}\r\n            />\r\n          </div>\r\n          {(weather?.main !== undefined) ? (\r\n            <div>\r\n              <div className=\"location-box\">\r\n                <div className=\"location\">{weather.name}</div>\r\n              </div>\r\n              <div className=\"weather-box\">\r\n                <div className=\"temp\">\r\n                  {Math.floor(weather.main.temp)}ºC\r\n            </div>\r\n                <div className=\"container-var\">\r\n                  <div className=\"min-temp\">\r\n                    <p className=\"primary-color\">MIN</p>\r\n                  <h1>{Math.floor(weather.main.temp_min)}ºc</h1>\r\n                  </div>\r\n                  <div className=\"max-temp\">\r\n                  <p className=\"primary-color\">MAX</p>\r\n                  <h1>{Math.floor(weather.main.temp_max)}ºc</h1>\r\n                  </div>\r\n                </div>\r\n                <div className=\"weather\">\r\n                  <h4>\r\n                    {(weather !== undefined) ? weather?.weather[0].main : ''}\r\n                  </h4>\r\n                  <img src={`http://openweathermap.org/img/wn/${weather?.weather[0].icon}@2x.png`} />\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ) : ('')}\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\b2ml-35\\Documents\\GitHub\\react-weather\\react-weather\\src\\models\\Weather.tsx",[],{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","severity":1,"message":"29","line":1,"column":17,"nodeType":"30","messageId":"31","endLine":1,"endColumn":26},{"ruleId":"32","severity":1,"message":"33","line":84,"column":19,"nodeType":"34","endLine":84,"endColumn":102},"no-native-reassign",["35"],"no-negated-in-lhs",["36"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]